//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MantenedoraCalidad.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NuevaQAEntities1 : DbContext
    {
        public NuevaQAEntities1()
            : base("name=NuevaQAEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<COCINA> COCINA { get; set; }
        public virtual DbSet<COMBU> COMBU { get; set; }
        public virtual DbSet<CONDICION_ENSAYO> CONDICION_ENSAYO { get; set; }
        public virtual DbSet<ENSAYO_BASCUL> ENSAYO_BASCUL { get; set; }
        public virtual DbSet<ENSAYO_C_LLAMA> ENSAYO_C_LLAMA { get; set; }
        public virtual DbSet<ENSAYO_COMB> ENSAYO_COMB { get; set; }
        public virtual DbSet<ENSAYO_ELECTR> ENSAYO_ELECTR { get; set; }
        public virtual DbSet<ENSAYO_FUGA_G> ENSAYO_FUGA_G { get; set; }
        public virtual DbSet<ENSAYO_NIVELAC> ENSAYO_NIVELAC { get; set; }
        public virtual DbSet<ENSAYO_RESIST> ENSAYO_RESIST { get; set; }
        public virtual DbSet<ENSAYO_RETENCION> ENSAYO_RETENCION { get; set; }
        public virtual DbSet<ENSAYO_TERMOCUP> ENSAYO_TERMOCUP { get; set; }
        public virtual DbSet<ENSAYO_TRABAM> ENSAYO_TRABAM { get; set; }
        public virtual DbSet<EQUIPO_PRUEBA> EQUIPO_PRUEBA { get; set; }
        public virtual DbSet<ERROR> ERROR { get; set; }
        public virtual DbSet<failed_jobs> failed_jobs { get; set; }
        public virtual DbSet<FAMILIA> FAMILIA { get; set; }
        public virtual DbSet<INFORME_PRUEBA> INFORME_PRUEBA { get; set; }
        public virtual DbSet<MARCA> MARCA { get; set; }
        public virtual DbSet<migrations> migrations { get; set; }
        public virtual DbSet<MODELO> MODELO { get; set; }
        public virtual DbSet<N_ENSAYO> N_ENSAYO { get; set; }
        public virtual DbSet<NORMA> NORMA { get; set; }
        public virtual DbSet<PERMISO> PERMISO { get; set; }
        public virtual DbSet<PRUEBA> PRUEBA { get; set; }
        public virtual DbSet<ROL> ROL { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TABLA_MAESTRO> TABLA_MAESTRO { get; set; }
        public virtual DbSet<TERMOC> TERMOC { get; set; }
        public virtual DbSet<TIPO_GAS> TIPO_GAS { get; set; }
        public virtual DbSet<users> users { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
        public virtual DbSet<VENTANA> VENTANA { get; set; }
        public virtual DbSet<correlativo> correlativo { get; set; }
        public virtual DbSet<MESES> MESES { get; set; }
        public virtual DbSet<password_resets> password_resets { get; set; }
    
        public virtual ObjectResult<GetMasterDetails_Result> GetMasterDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMasterDetails_Result>("GetMasterDetails");
        }
    
        public virtual int SP_AgregarUsuario(string rut_usuario, string nom_usuario, string apell_usuario, string contr_usuario, string patron, string nom_supervisor, Nullable<int> id_rol)
        {
            var rut_usuarioParameter = rut_usuario != null ?
                new ObjectParameter("rut_usuario", rut_usuario) :
                new ObjectParameter("rut_usuario", typeof(string));
    
            var nom_usuarioParameter = nom_usuario != null ?
                new ObjectParameter("nom_usuario", nom_usuario) :
                new ObjectParameter("nom_usuario", typeof(string));
    
            var apell_usuarioParameter = apell_usuario != null ?
                new ObjectParameter("apell_usuario", apell_usuario) :
                new ObjectParameter("apell_usuario", typeof(string));
    
            var contr_usuarioParameter = contr_usuario != null ?
                new ObjectParameter("contr_usuario", contr_usuario) :
                new ObjectParameter("contr_usuario", typeof(string));
    
            var patronParameter = patron != null ?
                new ObjectParameter("patron", patron) :
                new ObjectParameter("patron", typeof(string));
    
            var nom_supervisorParameter = nom_supervisor != null ?
                new ObjectParameter("nom_supervisor", nom_supervisor) :
                new ObjectParameter("nom_supervisor", typeof(string));
    
            var id_rolParameter = id_rol.HasValue ?
                new ObjectParameter("id_rol", id_rol) :
                new ObjectParameter("id_rol", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AgregarUsuario", rut_usuarioParameter, nom_usuarioParameter, apell_usuarioParameter, contr_usuarioParameter, patronParameter, nom_supervisorParameter, id_rolParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_ValidarUsuario_Result> SP_ValidarUsuario(string rut_usuario, string contr_usuario, string patron)
        {
            var rut_usuarioParameter = rut_usuario != null ?
                new ObjectParameter("rut_usuario", rut_usuario) :
                new ObjectParameter("rut_usuario", typeof(string));
    
            var contr_usuarioParameter = contr_usuario != null ?
                new ObjectParameter("contr_usuario", contr_usuario) :
                new ObjectParameter("contr_usuario", typeof(string));
    
            var patronParameter = patron != null ?
                new ObjectParameter("patron", patron) :
                new ObjectParameter("patron", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ValidarUsuario_Result>("SP_ValidarUsuario", rut_usuarioParameter, contr_usuarioParameter, patronParameter);
        }
    }
}
